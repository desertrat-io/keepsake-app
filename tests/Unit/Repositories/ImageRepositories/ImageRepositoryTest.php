<?php

namespace Tests\Unit\Repositories\ImageRepositories;

use App\DTO\Accounts\UserData;
use App\DTO\Images\ImageData;
use App\Models\AccountModels\User;
use App\Models\ImageModels\Image;
use App\Repositories\ImageRepositories\ImageEloquentRepository;
use App\Repositories\RepositoryContracts\ImageRepositoryContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

#[CoversClass(ImageEloquentRepository::class)]
class ImageRepositoryTest extends TestCase
{

    use RefreshDatabase;

    private ImageRepositoryContract $imageRepository;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->imageRepository = $this->app->make(ImageRepositoryContract::class);
    }

    #[Test]
    public function ifEloquentBoundToCorrectConcrete(): void
    {
        if (env('MODEL_MODE') === 'eloquent') {
            $repo = new ImageEloquentRepository();
            $this->assertEquals(Image::class, $repo->concreteEntityClass());
        } else {
            $this->markTestSkipped('Model mode is not eloquent, no need for this test');
        }
    }

    #[Test]
    public function canCreateImageFromImageData(): void
    {
        $user = UserData::fromModel(User::factory()->create());
        $imageData = ImageData::from([
            'storageId' => fake()->shuffleString,
            'storagePath' => fake()->filePath(),
            'uploadedBy' => $user
        ]);
        $image = $this->imageRepository->createImage($imageData);
        $this->assertInstanceOf(ImageData::class, $image);
        $this->assertDatabaseHas('images', [
            'storage_id' => $imageData->storageId,
            'storage_path' => $imageData->storagePath,
            'uploaded_by' => $user->id,
        ]);
        $this->assertEquals($user->id, $image->uploadedBy->id);
    }
}
