<?php

namespace Tests\Unit\Repositories\DocumentRepositories;

use App\DTO\Accounts\UserData;
use App\DTO\Documents\DocumentData;
use App\Models\AccountModels\User;
use App\Models\DocumentModels\Document;
use App\Repositories\DocumentRepositories\DocumentEloquentRepository;
use App\Repositories\RepositoryContracts\DocumentRepositoryContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

#[CoversClass(DocumentEloquentRepository::class)]
class DocumentRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private DocumentRepositoryContract $documentRepository;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->documentRepository = $this->app->make(DocumentRepositoryContract::class);
    }

    #[Test]
    public function ifEloquentBoundToCorrectConcrete(): void
    {
        if (env('MODEL_MODE') === 'eloquent') {
            $repo = new DocumentEloquentRepository();
            $this->assertEquals(Document::class, $repo->concreteEntityClass());
        } else {
            $this->markTestSkipped('Model mode is not eloquent, no need for this test');
        }
    }

    #[Test]
    public function canCreateDocument(): void
    {
        $user = UserData::fromModel(User::factory()->create());

        $documentData = DocumentData::from(['title' => fake()->title, 'uploadedBy' => $user, 'storageId' => fake()->uuid]);
        $newDocumentData = $this->documentRepository->createDocument($documentData);
        $this->assertDatabaseHas('documents', [
            'title' => $documentData->title,
            'uploaded_by' => $documentData->uploadedBy->id,
            'storage_id' => $documentData->storageId,
        ]);
        $this->assertInstanceOf(DocumentData::class, $newDocumentData);
        $this->assertEquals($documentData->title, $newDocumentData->title);
        $this->assertEquals($documentData->uploadedBy->id, $newDocumentData->uploadedBy->id);
        $this->assertEquals($documentData->storageId, $newDocumentData->storageId);
    }


}
