<?php

namespace Tests\Unit\Repositories\AccountRepositories;

use App\DTO\Accounts\AccountData;
use App\DTO\Accounts\UserData;
use App\Models\AccountModels\Account;
use App\Models\AccountModels\User;
use App\Repositories\AccountRepositories\AccountEloquentRepository;
use App\Repositories\RepositoryContracts\AccountRepositoryContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

#[CoversClass(AccountEloquentRepository::class)]
class AccountRepositoryTest extends TestCase
{

    use RefreshDatabase;

    private AccountRepositoryContract $accountRepository;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->accountRepository = $this->app->make(AccountRepositoryContract::class);
    }

    #[Test]
    public function ifEloquentBoundToCorrectConcrete(): void
    {
        if (env('MODEL_MODE') === 'eloquent') {
            $repo = new AccountEloquentRepository();
            $this->assertEquals(Account::class, $repo->concreteEntityClass());
        } else {
            $this->markTestSkipped('Model mode is not eloquent, no need for this test');
        }
    }

    #[Test]
    public function canCreateAccount(): void
    {
        $userModel = User::factory()->create();
        $userData = UserData::fromModel($userModel);

        $accountData = $this->accountRepository->createNewAccountFromUser($userData);
        $this->assertInstanceOf(AccountData::class, $accountData);
        $this->assertDatabaseHas('accounts', [
            'id' => $accountData->id,
            'user_id' => $userData->id,
        ]);
    }
}
