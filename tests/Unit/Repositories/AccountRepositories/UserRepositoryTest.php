<?php

namespace Tests\Unit\Repositories\AccountRepositories;

use App\DTO\Accounts\UserData;
use App\Models\AccountModels\Account;
use App\Models\AccountModels\User;
use App\Repositories\AccountRepositories\UserEloquentRepository;
use App\Repositories\RepositoryContracts\UserRepositoryContract;
use Hash;
use Illuminate\Foundation\Testing\RefreshDatabase;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

#[CoversClass(UserEloquentRepository::class)]
class UserRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private UserRepositoryContract $userRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userRepository = $this->app->make(UserRepositoryContract::class);
    }

    #[Test]
    public function ifEloquentBoundToCorrectConcrete(): void
    {
        if (env('MODEL_MODE') === 'eloquent') {
            $repo = new UserEloquentRepository();
            $this->assertEquals(User::class, $repo->concreteEntityClass());
        } else {
            $this->markTestSkipped('Model mode is not eloquent, no need for this test');
        }
    }

    #[Test]
    public function canCreateUser(): void
    {
        $userData = UserData::from(['name' => fake()->name, 'email' => fake()->email]);
        $newUser = $this->userRepository->createNewUser(
            userData: $userData,
            password: Hash::make(fake()->shuffleString)
        );
        $this->assertDatabaseHas(
            'users',
            ['name' => $newUser->name, 'email' => $newUser->email]
        );
        $this->assertEquals($newUser->name, $userData->name);
        $this->assertEquals($newUser->email, $userData->email);
        $userData2 = UserData::from(['name' => fake()->name, 'email' => fake()->email]);
        $userAsData = $this->userRepository->createNewUser(
            userData: $userData2,
            password: Hash::make(fake()->shuffleString),
            returnAsData: true
        );
        $this->assertInstanceOf(UserData::class, $userAsData);
        $this->assertDatabaseHas(
            'users',
            ['name' => $userAsData->name, 'email' => $userAsData->email]
        );
        $this->assertEquals($userData2->name, $userAsData->name);
        $this->assertEquals($userData2->email, $userAsData->email);
    }

    #[Test]
    public function canFindUserById(): void
    {
        $user = User::factory()->create();
        $this->assertDatabaseHas('users', ['name' => $user->name]);
        $foundUser = $this->userRepository->getUserById(userId: $user->id);
        $this->assertEquals($user->name, $foundUser->name);
        $this->assertEquals($user->email, $foundUser->email);
        $this->assertEquals($user->id, $foundUser->id);
        $this->assertEquals($user->uuid, $foundUser->uuid);
    }

    #[Test]
    public function canFindUserByIdWithAccount(): void
    {
        $user = User::factory()->create();
        $account = Account::factory()->create(['user_id' => $user->id]);
        $this->assertDatabaseHas('users', ['id' => $user->id]);
        $this->assertDatabaseHas('accounts', ['id' => $account->id, 'user_id' => $user->id]);
        $userWithAccount = $this->userRepository->getUserById(userId: $user->id, includeAccount: true);
        $this->assertInstanceOf(User::class, $userWithAccount);
        $this->assertEquals($account->id, $userWithAccount->account->id);
    }

    #[Test]
    public function canFindUserAsData(): void
    {
        $user = User::factory()->create();
        $userData = $this->userRepository->getUserById(userId: $user->id, asData: true);
        $this->assertInstanceOf(UserData::class, $userData);
        $this->assertDatabaseHas('users', ['id' => $userData->id]);
        $this->assertEquals($user->email, $userData->email);
    }

    #[Test]
    public function canFindUserAsDataWithAccount(): void
    {
        $user = User::factory()->create();
        $account = Account::factory()->create(['user_id' => $user->id]);
        $this->assertDatabaseHas('users', ['id' => $user->id]);
        $this->assertDatabaseHas('accounts', ['id' => $account->id, 'user_id' => $user->id]);
        $userDataWithAccount = $this->userRepository->getUserById(userId: $user->id, includeAccount: true, asData: true);
        // due to spatie data lazy load, asserting that the account property on the UserData object is an instance
        // of AccountData::class is not possible because it hasn't been resolved yet
        $this->assertInstanceOf(UserData::class, $userDataWithAccount);
        $this->assertEquals($account->id, $userDataWithAccount->account->id);

    }
}
